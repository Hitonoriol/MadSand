/* Params:
 *  rootDir - project's root directory
 *  appName - name of the application
 *  jlinkModuleDir - jmod directories
 *  jlinkModuleList - list of modules to include
 */

ext {
	jpackageDir = "${buildDir}/distribution"
	distDir = "${jpackageDir}/${appName}"
	jlinkRuntimeDir = "${rootDir}/jlink/${appName}-${osName}"
	jlinkRuntimeImg = "${jlinkRuntimeDir}/runtime"
}

task createRuntime(type: Exec) {
	workingDir project.projectDir
	inputs.property("runtime", jlinkRuntimeImg)
	commandLine = [
			"${javaBin}/jlink",
			'--module-path', jlinkModuleDir,
			'--add-modules', jlinkModuleList,
			'--strip-debug',
			'--no-header-files',
			'--no-man-pages',
			"--vm=server",
			"--compress=2",
			'--output', jlinkRuntimeImg
	]
	outputs.dir(jlinkRuntimeDir)
}

task jpackage(type: Exec, dependsOn: [dist, createRuntime]) {
	doFirst() {
		project.delete("${jpackageDir}/$project.appName")
	}
	workingDir project.projectDir
	def commands = [
			"${javaBin}/jpackage",
			'--dest', jpackageDir,
			'--input', "${buildDir}/libs",
			'--type', 'app-image',
			'--name', project.appName,
			'--app-version', "${project.versionCode}",
			'--vendor', author,
			'--main-class', project.mainClassName,
			'--main-jar', jar.archiveFile.get().asFile.getName(),
			'--runtime-image', jlinkRuntimeImg
	]
	
	if (osName.contains('windows')) {
		commands << '--icon'
		commands << "${project.assetsDir}/icons/icon-256.ico"
	} else if (osName.contains('linux')) {
		commands << '--icon'
		commands << "${project.assetsDir}/icons/icon-64.png"
	} else if (osName.contains('mac')) {
		commands << '--java-options'
		commands << "-XstartOnFirstThread"
	}

	commandLine = commands
}

task nativeDist(type: Zip, dependsOn: jpackage) {
    archiveFileName = "${appName}-${project.version}-${osName}.zip"
    destinationDirectory = file(jpackageDir)
    from(distDir) {
	    into file(distDir).name
    }
    doLast {
    	delete distDir
    }
}